{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Split Raster Quick Links PyPI: split-raster GitHub: split-raster Introduction Split Raster is an open-source and highly versatile Python package designed to easily break down large images into smaller, more manageable tiles. While the package is particularly useful for deep learning and computer vision tasks, it can be applied to a wide range of applications. Initially developed by Caihao Cui to provide optimal support for deep learning and computer vision tasks, Split Raster was specifically designed for image segmentation tasks on satellite images as well as remote sensing methods. By generating tiled output image samples from an input raster dataset, Split Raster enables more efficient and effective analysis of large images. The package also includes a random sampling function that generates a fixed number of tiles for early experimentation. For example, let's say you have a set of RGB and GT images, each with dimensions of 1000-by-1000 pixels. Utilizing Split Raster , you can easily generate 16 tiles, each with dimensions of 256x256 pixels and automatic padding on the edges. The package also allows for customization of tile size and overlap to better suit individual project needs. Furthermore, Split Raster handles the padding and naming of output images automatically, saving time and effort (e.g., 0001.png, 0002.png, ..., 9999.png). Install the packages pip install splitraster Try Sample code The sample image can be found in the GitHub repo. from splitraster import io input_image_path = \"./data/raw/RGB.png\" gt_image_path = \"./data/raw/GT.png\" save_path = \"./data/processed/RGB\" save_path_gt = \"./data/processed/GT\" crop_size = 256 # 256x256 pixels of the output tiles repetition_rate = 0.0 # 0.0 means no overlap overwrite = False # if True, overwrite the existing files in the save_path n = io.split_image(input_image_path, save_path, crop_size, repetition_rate=repetition_rate, overwrite=overwrite) print(f\"{n} tiles sample of {input_image_path} are added at {save_path}\") n = io.split_image(gt_image_path, save_path_gt, crop_size, repetition_rate=repetition_rate, overwrite=overwrite) print(f\"{n} tiles sample of {gt_image_path} are added at {save_path_gt}\") Possible results. Note that if you did not set the overwrite parameter to True, the existing files will not be overwritten. The name of the new files will start with the next number of the existing files. Input Image File Shape (H, W, D):(1000, 1000, 3) crop_size = 256, stride = 256 Padding Image File Shape (H, W, D):(1024, 1024, 3) Generating: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:00<00:00, 27.63img/s] 16 tiles sample of ../data/raw/RGB.png are added at ../data/processed/RGB Input Image File Shape (H, W, D):(1000, 1000) crop_size = 256, stride = 256 Padding Image File Shape (H, W, D):(1024, 1024) Generating: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:00<00:00, 48.39img/s]16 tiles sample of ../data/raw/GT.png are added at ../data/processed/GT Random Sampling Code The basic implementation is still the same as the above. Just replace the 'split_image' method to 'rand_crop_image'. from splitraster import io input_image_path = \"./data/raw/RGB.png\" gt_image_path = \"./data/raw/GT.png\" input_save_path = \"./data/processed/Rand/RGB\" gt_save_path = \"./data/processed/Rand/GT\" n = io.random_crop_image(input_image_path, input_save_path, gt_image_path, gt_save_path, crop_size=256, crop_number=20, img_ext='.png', label_ext='.png', overwrite=True) print(f\"{n} sample paris of {input_image_path, gt_image_path} are added at {input_save_path, gt_save_path}.\") Results: Generating: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:01<00:00, 19.27img/s]20 sample paris of ('../data/raw/RGB.png', '../data/raw/GT.png') are added at ('../data/processed/Rand/RGB', '../data/processed/Rand/GT'). Update Log 2023-Mar-19 Update github actions and add tutorial for the package. 2022-Dec-16 Upgrade the package to support python 3.8, 3.9, 3.10, 3.11 (https://pypi.org/project/splitraster/0.3.3). 2022-Jan-16 Fix bugs to make package suitable for python 3.7. Publish new version at(https://pypi.org/project/splitraster/0.3.2/) . Contribution Guidelines If you run into issues or have questions, please open an issue or submit a pull request . If you are interested in contributing to splitraster , please see our contributing guidelines .","title":"Home"},{"location":"#split-raster","text":"","title":"Split Raster"},{"location":"#quick-links","text":"PyPI: split-raster GitHub: split-raster","title":"Quick Links"},{"location":"#introduction","text":"Split Raster is an open-source and highly versatile Python package designed to easily break down large images into smaller, more manageable tiles. While the package is particularly useful for deep learning and computer vision tasks, it can be applied to a wide range of applications. Initially developed by Caihao Cui to provide optimal support for deep learning and computer vision tasks, Split Raster was specifically designed for image segmentation tasks on satellite images as well as remote sensing methods. By generating tiled output image samples from an input raster dataset, Split Raster enables more efficient and effective analysis of large images. The package also includes a random sampling function that generates a fixed number of tiles for early experimentation. For example, let's say you have a set of RGB and GT images, each with dimensions of 1000-by-1000 pixels. Utilizing Split Raster , you can easily generate 16 tiles, each with dimensions of 256x256 pixels and automatic padding on the edges. The package also allows for customization of tile size and overlap to better suit individual project needs. Furthermore, Split Raster handles the padding and naming of output images automatically, saving time and effort (e.g., 0001.png, 0002.png, ..., 9999.png).","title":"Introduction"},{"location":"#install-the-packages","text":"pip install splitraster","title":"Install the packages"},{"location":"#try-sample-code","text":"The sample image can be found in the GitHub repo. from splitraster import io input_image_path = \"./data/raw/RGB.png\" gt_image_path = \"./data/raw/GT.png\" save_path = \"./data/processed/RGB\" save_path_gt = \"./data/processed/GT\" crop_size = 256 # 256x256 pixels of the output tiles repetition_rate = 0.0 # 0.0 means no overlap overwrite = False # if True, overwrite the existing files in the save_path n = io.split_image(input_image_path, save_path, crop_size, repetition_rate=repetition_rate, overwrite=overwrite) print(f\"{n} tiles sample of {input_image_path} are added at {save_path}\") n = io.split_image(gt_image_path, save_path_gt, crop_size, repetition_rate=repetition_rate, overwrite=overwrite) print(f\"{n} tiles sample of {gt_image_path} are added at {save_path_gt}\") Possible results. Note that if you did not set the overwrite parameter to True, the existing files will not be overwritten. The name of the new files will start with the next number of the existing files. Input Image File Shape (H, W, D):(1000, 1000, 3) crop_size = 256, stride = 256 Padding Image File Shape (H, W, D):(1024, 1024, 3) Generating: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:00<00:00, 27.63img/s] 16 tiles sample of ../data/raw/RGB.png are added at ../data/processed/RGB Input Image File Shape (H, W, D):(1000, 1000) crop_size = 256, stride = 256 Padding Image File Shape (H, W, D):(1024, 1024) Generating: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:00<00:00, 48.39img/s]16 tiles sample of ../data/raw/GT.png are added at ../data/processed/GT","title":"Try Sample code"},{"location":"#random-sampling-code","text":"The basic implementation is still the same as the above. Just replace the 'split_image' method to 'rand_crop_image'. from splitraster import io input_image_path = \"./data/raw/RGB.png\" gt_image_path = \"./data/raw/GT.png\" input_save_path = \"./data/processed/Rand/RGB\" gt_save_path = \"./data/processed/Rand/GT\" n = io.random_crop_image(input_image_path, input_save_path, gt_image_path, gt_save_path, crop_size=256, crop_number=20, img_ext='.png', label_ext='.png', overwrite=True) print(f\"{n} sample paris of {input_image_path, gt_image_path} are added at {input_save_path, gt_save_path}.\") Results: Generating: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:01<00:00, 19.27img/s]20 sample paris of ('../data/raw/RGB.png', '../data/raw/GT.png') are added at ('../data/processed/Rand/RGB', '../data/processed/Rand/GT').","title":"Random Sampling Code"},{"location":"#update-log","text":"2023-Mar-19 Update github actions and add tutorial for the package. 2022-Dec-16 Upgrade the package to support python 3.8, 3.9, 3.10, 3.11 (https://pypi.org/project/splitraster/0.3.3). 2022-Jan-16 Fix bugs to make package suitable for python 3.7. Publish new version at(https://pypi.org/project/splitraster/0.3.2/) .","title":"Update Log"},{"location":"#contribution-guidelines","text":"If you run into issues or have questions, please open an issue or submit a pull request . If you are interested in contributing to splitraster , please see our contributing guidelines .","title":"Contribution Guidelines"},{"location":"about/","text":"About this Package Split Raster is a python package to split a large image into small tiles. It is useful for deep learning and computer vision tasks. The package can also be used to split a large image into small tiles for other applications. The initial version of the package is developed by Chris to provide good support for deep learning and computer vision tasks on Satelite Images by creating tiled output image samples from an input raster dataset. Visit Author's Blog for more information. Related Projects: Aerial Image Segmentation with Deep Learning on PyTorch Roads from Above: Augmenting Civil Engineering & Geospatial Workflows with Machine Learning","title":"About"},{"location":"about/#about-this-package","text":"Split Raster is a python package to split a large image into small tiles. It is useful for deep learning and computer vision tasks. The package can also be used to split a large image into small tiles for other applications. The initial version of the package is developed by Chris to provide good support for deep learning and computer vision tasks on Satelite Images by creating tiled output image samples from an input raster dataset. Visit Author's Blog for more information. Related Projects: Aerial Image Segmentation with Deep Learning on PyTorch Roads from Above: Augmenting Civil Engineering & Geospatial Workflows with Machine Learning","title":"About this Package"},{"location":"gis/","text":"Split Raster Images for Remote Sensing (GeoTIFF) and GIS If you are working with Remote Sensing images, you can use this package to split the images into small tiles. You can also work with Remote Sensing (GeoTIFF) Satellite images such as Multispectral Images which have more bands or channels. All the codes will be the same, but with a small difference. Replace the io with the geo module. This feature also needs you to install the gdal package with the following command in your python environment. This package is not in the required packages due to many users may not use this function. conda install -c conda-forge gdal Try Sample code Sample Code: from splitraster import geo input_image_path = \"./data/raw/Input.tif\" gt_image_path = \"./data/raw/GT.tif\" save_path = \"../data/processed/Input\" crop_size = 256 repetition_rate = 0.5 overwrite = False n = geo.split_image(input_image_path, save_path, crop_size, repetition_rate=repetition_rate, overwrite=overwrite) print(f\"{n} tiles sample of {input_image_path} are added at {save_path}\") Random Sampling Code from splitraster import geo input_tif_image_path = \"./data/raw/TIF/RGB5k.tif\" gt_tif_image_path = \"./data/raw/TIF/GT5k.tif\" input_save_image_path = \"./data/processed/Rand/RGB_TIF\" gt_save_image_path = \"./data/processed/Rand/GT_TIF\" n = geo.random_crop_image(input_tif_image_path, input_save_image_path, gt_tif_image_path, gt_save_image_path, crop_size=500, crop_number=20, overwrite=True) print(f\"{n} sample paris of {input_tif_image_path, gt_tif_image_path} are added at {input_save_image_path, gt_save_image_path}.\")","title":"GIS-RS"},{"location":"gis/#split-raster-images-for-remote-sensing-geotiff-and-gis","text":"If you are working with Remote Sensing images, you can use this package to split the images into small tiles. You can also work with Remote Sensing (GeoTIFF) Satellite images such as Multispectral Images which have more bands or channels. All the codes will be the same, but with a small difference. Replace the io with the geo module. This feature also needs you to install the gdal package with the following command in your python environment. This package is not in the required packages due to many users may not use this function. conda install -c conda-forge gdal","title":"Split Raster Images for Remote Sensing (GeoTIFF) and GIS"},{"location":"gis/#try-sample-code","text":"Sample Code: from splitraster import geo input_image_path = \"./data/raw/Input.tif\" gt_image_path = \"./data/raw/GT.tif\" save_path = \"../data/processed/Input\" crop_size = 256 repetition_rate = 0.5 overwrite = False n = geo.split_image(input_image_path, save_path, crop_size, repetition_rate=repetition_rate, overwrite=overwrite) print(f\"{n} tiles sample of {input_image_path} are added at {save_path}\")","title":"Try Sample code"},{"location":"gis/#random-sampling-code","text":"from splitraster import geo input_tif_image_path = \"./data/raw/TIF/RGB5k.tif\" gt_tif_image_path = \"./data/raw/TIF/GT5k.tif\" input_save_image_path = \"./data/processed/Rand/RGB_TIF\" gt_save_image_path = \"./data/processed/Rand/GT_TIF\" n = geo.random_crop_image(input_tif_image_path, input_save_image_path, gt_tif_image_path, gt_save_image_path, crop_size=500, crop_number=20, overwrite=True) print(f\"{n} sample paris of {input_tif_image_path, gt_tif_image_path} are added at {input_save_image_path, gt_save_image_path}.\")","title":"Random Sampling Code"},{"location":"tutorial/","text":"Tutorial for Using Split-Raster for Deep Learning This demo we will split a large image into small tiles. It is useful for deep learning and computer vision tasks. The package can also be used to split a large image into small tiles for other applications. For example, we have a large image of size 1000-by-1000, and we want to split it into 256-by-256 tiles. The SplitRaster package successfully generate 16 256x256 images tiles with automatic padding on the edges. You can adjust the tile size and the overlap of the tiles for your own applications. Setup your local or cloud environment for this demo. This demo we use the python 3.10, but the package is compatible with python 3.7, 3.8, 3.9, 3.10, 3.11 and 3.12. >pip install -q splitraster Create Image Sample Pairs from splitraster import io input_image_path = \"../data/raw/RGB.png\" gt_image_path = \"../data/raw/GT.png\" save_path = \"../data/processed/RGB\" save_path_gt = \"../data/processed/GT\" crop_size = 256 repetition_rate = 0 # <----- change this value to 0.5 for 50% overlap overwrite = True # <----- change this value to False for no overwrite demo n = io.split_image(input_image_path, save_path, crop_size, repetition_rate=repetition_rate, overwrite=overwrite) print(f\"{n} tiles sample of {input_image_path} are added at {save_path}\") n = io.split_image(gt_image_path, save_path_gt, crop_size, repetition_rate=repetition_rate, overwrite=overwrite) print(f\"{n} tiles sample of {gt_image_path} are added at {save_path_gt}\") Output: Input Image File Shape (H, W, D):(1000, 1000, 3) crop_size = 256, stride = 256 Padding Image File Shape (H, W, D):(1024, 1024, 3) ... 16 tiles sample of ../data/raw/GT.png are added at ../data/processed/GT Random Sampling Code If you want to create a small data set at the early stage for exploaration. Use the random sampling code, you can use the following code. The following code shows to geneate a 20 tiles (256x256) from the 1000x1000 image from splitraster import io input_image_path = \"../data/raw/RGB.png\" gt_image_path = \"../data/raw/GT.png\" input_save_path = \"../data/processed/Rand/RGB\" gt_save_path = \"../data/processed/Rand/GT\" n = io.random_crop_image(input_image_path, input_save_path, gt_image_path, gt_save_path, crop_size=256, crop_number=20, img_ext='.png', label_ext='.png', overwrite=True) print(f\"{n} sample paris of {input_image_path, gt_image_path} are added at {input_save_path, gt_save_path}.\") Result: Generating: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:01<00:00, 19.27img/s]20 sample paris of ('../data/raw/RGB.png', '../data/raw/GT.png') are added at ('../data/processed/Rand/RGB', '../data/processed/Rand/GT'). Use the output of the Split-Raster as the input of the Deep Learning Model We will use pytorch as the deep learning framework for this demo. pip install -q torch torchvision Create a DataLoader for the Split-Raster output import torch from torch.utils.data import Dataset from torchvision import datasets from torchvision.transforms import ToTensor import matplotlib.pyplot as plt from skimage.io import imread, imsave import os import numpy as np create the DatasetSegmentation class to create a custom dataset class for the deep learning model. # Create a custom dataset class class DatasetSegmentation(torch.utils.data.Dataset): def __init__(self, image_path, label_path): self.imgfolder = image_path self.maskfolder = label_path self.imgs = list(sorted(os.listdir(image_path))) self.masks = list(sorted(os.listdir(label_path))) def __getitem__(self, idx): img_path = os.path.join(self.imgfolder, self.imgs[idx]) mask_path = os.path.join(self.maskfolder, self.masks[idx]) data = imread(img_path) data = np.moveaxis(data, -1, 0) label = imread(mask_path) label = label/255 return torch.from_numpy(data).float(), torch.from_numpy(label).long() def __len__(self): return len(self.imgs) AerialDataset = DatasetSegmentation(\"../data/processed/RGB\", \"../data/processed/GT\") Create a DataLoader and read a batch of images from the Split-Raster output. from torch.utils.data import DataLoader train_dataloader = DataLoader(AerialDataset, batch_size=16, shuffle=False) train_features, train_labels = next(iter(train_dataloader)) print(f\"Feature batch shape: {train_features.size()}\") print(f\"Labels batch shape: {train_labels.size()}\") Output: Feature batch shape: torch.Size([16, 3, 256, 256]) Labels batch shape: torch.Size([16, 256, 256]) Visualize the images and labels. # Select 16 random images from the training set import random idx = random.randint(0, 15) img = train_features[idx].squeeze().numpy() label = train_labels[idx].squeeze().numpy() print(f\"Feature batch shape: {img.shape, img.max(), img.min()}\") print(f\"Labels batch shape: {label.shape, label.max(), label.min()}\") from matplotlib.pyplot import figure figure(figsize=(12, 5), dpi=80) plt.subplot(1,2,1) img = np.moveaxis(img, 0, -1) # adjust the channel dimension plt.imshow(img.astype(np.uint8) ) plt.subplot(1,2,2) plt.imshow(label.astype(np.uint8), cmap=\"gray\") plt.show() Feature batch shape: ((3, 256, 256), 221.0, 1.0) Labels batch shape: ((256, 256), 1, 0) Use torchvision to visualize the images and labels import torchvision grid_img = torchvision.utils.make_grid(train_features/255, nrow=4) grid_label = torchvision.utils.make_grid(train_labels.unsqueeze_(1), nrow=4) print(grid_img.shape) print(grid_label.shape) figure(figsize=(12, 18), dpi=80) plt.subplot(1,2,1) plt.imshow(grid_img.permute(1, 2, 0)) plt.subplot(1,2,2) plt.imshow(grid_label[0,:,:], cmap='gray') plt.show() Output: (torch.Size([3, 1034, 1034]), torch.Size([3, 1034, 1034])) Download the Notebook Find the full code in this Notebook Tutorial: SplitRaster Tutorial .","title":"Tutorial"},{"location":"tutorial/#tutorial-for-using-split-raster-for-deep-learning","text":"This demo we will split a large image into small tiles. It is useful for deep learning and computer vision tasks. The package can also be used to split a large image into small tiles for other applications. For example, we have a large image of size 1000-by-1000, and we want to split it into 256-by-256 tiles. The SplitRaster package successfully generate 16 256x256 images tiles with automatic padding on the edges. You can adjust the tile size and the overlap of the tiles for your own applications. Setup your local or cloud environment for this demo. This demo we use the python 3.10, but the package is compatible with python 3.7, 3.8, 3.9, 3.10, 3.11 and 3.12. >pip install -q splitraster","title":"Tutorial for Using Split-Raster for Deep Learning"},{"location":"tutorial/#create-image-sample-pairs","text":"from splitraster import io input_image_path = \"../data/raw/RGB.png\" gt_image_path = \"../data/raw/GT.png\" save_path = \"../data/processed/RGB\" save_path_gt = \"../data/processed/GT\" crop_size = 256 repetition_rate = 0 # <----- change this value to 0.5 for 50% overlap overwrite = True # <----- change this value to False for no overwrite demo n = io.split_image(input_image_path, save_path, crop_size, repetition_rate=repetition_rate, overwrite=overwrite) print(f\"{n} tiles sample of {input_image_path} are added at {save_path}\") n = io.split_image(gt_image_path, save_path_gt, crop_size, repetition_rate=repetition_rate, overwrite=overwrite) print(f\"{n} tiles sample of {gt_image_path} are added at {save_path_gt}\") Output: Input Image File Shape (H, W, D):(1000, 1000, 3) crop_size = 256, stride = 256 Padding Image File Shape (H, W, D):(1024, 1024, 3) ... 16 tiles sample of ../data/raw/GT.png are added at ../data/processed/GT","title":"Create Image Sample Pairs"},{"location":"tutorial/#random-sampling-code","text":"If you want to create a small data set at the early stage for exploaration. Use the random sampling code, you can use the following code. The following code shows to geneate a 20 tiles (256x256) from the 1000x1000 image from splitraster import io input_image_path = \"../data/raw/RGB.png\" gt_image_path = \"../data/raw/GT.png\" input_save_path = \"../data/processed/Rand/RGB\" gt_save_path = \"../data/processed/Rand/GT\" n = io.random_crop_image(input_image_path, input_save_path, gt_image_path, gt_save_path, crop_size=256, crop_number=20, img_ext='.png', label_ext='.png', overwrite=True) print(f\"{n} sample paris of {input_image_path, gt_image_path} are added at {input_save_path, gt_save_path}.\") Result: Generating: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:01<00:00, 19.27img/s]20 sample paris of ('../data/raw/RGB.png', '../data/raw/GT.png') are added at ('../data/processed/Rand/RGB', '../data/processed/Rand/GT').","title":"Random Sampling Code"},{"location":"tutorial/#use-the-output-of-the-split-raster-as-the-input-of-the-deep-learning-model","text":"We will use pytorch as the deep learning framework for this demo. pip install -q torch torchvision","title":"Use the output of the Split-Raster as the input of the Deep Learning Model"},{"location":"tutorial/#create-a-dataloader-for-the-split-raster-output","text":"import torch from torch.utils.data import Dataset from torchvision import datasets from torchvision.transforms import ToTensor import matplotlib.pyplot as plt from skimage.io import imread, imsave import os import numpy as np create the DatasetSegmentation class to create a custom dataset class for the deep learning model. # Create a custom dataset class class DatasetSegmentation(torch.utils.data.Dataset): def __init__(self, image_path, label_path): self.imgfolder = image_path self.maskfolder = label_path self.imgs = list(sorted(os.listdir(image_path))) self.masks = list(sorted(os.listdir(label_path))) def __getitem__(self, idx): img_path = os.path.join(self.imgfolder, self.imgs[idx]) mask_path = os.path.join(self.maskfolder, self.masks[idx]) data = imread(img_path) data = np.moveaxis(data, -1, 0) label = imread(mask_path) label = label/255 return torch.from_numpy(data).float(), torch.from_numpy(label).long() def __len__(self): return len(self.imgs) AerialDataset = DatasetSegmentation(\"../data/processed/RGB\", \"../data/processed/GT\") Create a DataLoader and read a batch of images from the Split-Raster output. from torch.utils.data import DataLoader train_dataloader = DataLoader(AerialDataset, batch_size=16, shuffle=False) train_features, train_labels = next(iter(train_dataloader)) print(f\"Feature batch shape: {train_features.size()}\") print(f\"Labels batch shape: {train_labels.size()}\") Output: Feature batch shape: torch.Size([16, 3, 256, 256]) Labels batch shape: torch.Size([16, 256, 256])","title":"Create a DataLoader for the Split-Raster output"},{"location":"tutorial/#visualize-the-images-and-labels","text":"# Select 16 random images from the training set import random idx = random.randint(0, 15) img = train_features[idx].squeeze().numpy() label = train_labels[idx].squeeze().numpy() print(f\"Feature batch shape: {img.shape, img.max(), img.min()}\") print(f\"Labels batch shape: {label.shape, label.max(), label.min()}\") from matplotlib.pyplot import figure figure(figsize=(12, 5), dpi=80) plt.subplot(1,2,1) img = np.moveaxis(img, 0, -1) # adjust the channel dimension plt.imshow(img.astype(np.uint8) ) plt.subplot(1,2,2) plt.imshow(label.astype(np.uint8), cmap=\"gray\") plt.show() Feature batch shape: ((3, 256, 256), 221.0, 1.0) Labels batch shape: ((256, 256), 1, 0)","title":"Visualize the images and labels."},{"location":"tutorial/#use-torchvision-to-visualize-the-images-and-labels","text":"import torchvision grid_img = torchvision.utils.make_grid(train_features/255, nrow=4) grid_label = torchvision.utils.make_grid(train_labels.unsqueeze_(1), nrow=4) print(grid_img.shape) print(grid_label.shape) figure(figsize=(12, 18), dpi=80) plt.subplot(1,2,1) plt.imshow(grid_img.permute(1, 2, 0)) plt.subplot(1,2,2) plt.imshow(grid_label[0,:,:], cmap='gray') plt.show() Output: (torch.Size([3, 1034, 1034]), torch.Size([3, 1034, 1034]))","title":"Use torchvision to visualize the images and labels"},{"location":"tutorial/#download-the-notebook","text":"Find the full code in this Notebook Tutorial: SplitRaster Tutorial .","title":"Download the Notebook"}]}